---
/**
 * @url https://world.glare-labs.uk/{lang}/library/
 */

import { getCollection } from "astro:content";
import { ViewTransitions } from "astro:transitions";
import { PageHeader } from "@modules/page-header";
import { PageFooter } from "@modules/page-footer";
import { PageRootHtmlLayout } from "@shared/layouts";
import { NavigationDrawerOpenButton, NavigationDrawer, NavigationDrawerHeader, NavigationDrawerCloseButton } from "@shared/navigation-drawer";
import { PageBody } from "@modules/page-body";
import TuneSvg from "@material-design-icons/svg/round/tune.svg?raw";
import { MaterialThemeScript } from "@shared/material-design";
import { PageMeta } from "@shared/page-meta";
import ImportBaseStyle from "@shared/styles/import-base-style.astro";
import ImportJetbrainsMonoStyle from "@shared/styles/import-jetbrains-mono-style.astro";
import ImportMdTypescaleStyle from "@shared/styles/import-md-typescale-style.astro";
import ImportScrollBarStyle from "@shared/styles/import-scroll-bar-style.astro";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";

const blogs = await getCollection("article");
const tags = Array.from(new Set(blogs.map((blog) => blog.data.tags ?? []).reduce((pre, cur) => [...pre, ...cur], [])));

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<PageRootHtmlLayout lang={lang}>
    <PageMeta
        slot="head"
        author="bre97"
        title={t("library-page.meta.title")}
        description={t("library-page.meta.description")}
        keywords={t("library-page.meta.keywords")}
        iconHref="/glare-labs-page-icon.svg"
        language={lang}
        url={`https://world.glare-labs.uk/${lang}/library/`}
        imageUrl="https://media-r2.glare-labs.uk/blog-logo.png"
        imageAlt={t("library-page.meta.title")}
        robots="index, follow"
        ogType="website"
    />
    <ImportBaseStyle slot="head" />
    <ImportMdTypescaleStyle slot="head" />
    <ImportScrollBarStyle slot="head" />
    <ImportJetbrainsMonoStyle slot="head" />
    <MaterialThemeScript slot="head" />
    <ViewTransitions slot="head" />

    <PageBody>
        <header class="sticky-header">
            <PageHeader />
        </header>

        <div class="page body-content">
            <div class="filter-container">
                <NavigationDrawerOpenButton>
                    <md-text-button id="open-filter-button">
                        {t("library-page.filter")}
                        <md-icon slot="icon" set:html={TuneSvg} />
                    </md-text-button>
                    <NavigationDrawer slot="navigation-drawer">
                        <NavigationDrawerHeader slot="headline">Filter</NavigationDrawerHeader>
                        <NavigationDrawerCloseButton slot="close-button" />

                        <div class="filter-panel" role="list">
                            <md-chip-set class="tag-filter chip-set" id="filter-chip-set" role="listitem">
                                {tags.map((tag) => <md-filter-chip class="filter-chip" label={tag} />)}
                            </md-chip-set>
                        </div>
                    </NavigationDrawer>
                </NavigationDrawerOpenButton>
            </div>

            <div class="collection-list" role="list">
                <ul class="blog-list">
                    {
                        blogs.map((blog) => (
                            <a href={`/${lang}/article/${blog.slug}/`} class="blog-list-item" data-tags={blog.data.tags} role="listitem" data-astro-reload>
                                <section>
                                    <h1 class="headline md-typescale-title-medium">{blog.data.headline}</h1>
                                    <p class="description md-typescale-body-medium">{blog.data.description}</p>
                                </section>
                                <p aria-hidden="true" class="file-name md-typescale-label-small">
                                    {blog.slug}
                                </p>
                                <md-ripple />
                            </a>
                        ))
                    }
                </ul>
            </div>
        </div>

        <footer class="width-forced">
            <PageFooter />
        </footer>
    </PageBody>
</PageRootHtmlLayout>

<script>
    import "@material/web/button/text-button";
    import "@material/web/chips/chip-set";
    import "@material/web/chips/filter-chip";
    import "@material/web/icon/icon";
</script>

<script>
    import type { MdChipSet, MdFilterChip } from "@material/web/all";

    document.addEventListener("astro:page-load", () => {
        const chipset = document.querySelector(".tag-filter.chip-set") as MdChipSet | null;

        const chips = chipset?.querySelectorAll("&>.filter-chip").values().toArray() as Array<MdFilterChip>;

        const blogs = document.querySelectorAll(".blog-list>.blog-list-item").values().toArray();

        const setBlogVisible = (blog: Element, visible: boolean) => {
            if (visible) {
                blog.removeAttribute("invisible");
            } else {
                blog.setAttribute("invisible", "");
            }
        };

        chipset?.addEventListener("click", (e) => {
            const isChipClick = chips.includes(e.target as unknown as any);

            if (!isChipClick) {
                return;
            }

            const activatedChips = chips.filter((chip) => chip.selected).map((chip) => chip.label);

            if (activatedChips.length === 0) {
                blogs.forEach((blog) => {
                    setBlogVisible(blog, true);
                });
                return;
            }

            for (const index in blogs) {
                const blog = blogs[index];

                const attr = blog.getAttribute("data-tags");
                if (attr === null) {
                    continue;
                }

                const attrArray = attr.split(",");
                let isTarget = false;
                for (const attrArrayItem of attrArray) {
                    if (activatedChips.includes(attrArrayItem)) {
                        isTarget = true;
                        break;
                    }
                }

                setBlogVisible(blog, isTarget);
            }
        });
    });
</script>

<style>
    .width-forced {
        max-width: 1200px;
        margin: 0 auto;
    }
    .page {
        min-height: 100vh;
    }
</style>

<style>
    .sticky-header {
        position: sticky;
        top: 0;
        z-index: 1;
        display: none;

        @media (max-width: 600px) {
            display: block;
        }
    }
    .body-content {
        --navigation-rail-width-computed: 80px;
        margin: 24px;
        max-width: calc(1200px - var(--navigation-rail-width-computed));

        /* width 1200px + rail-width 80px */
        @media (min-width: 1280px) {
            margin: 24px auto;
        }
    }
    .collection-list {
        & > h1.collection-series-name:first-child {
            margin-top: 0;
        }
        & > h1.collection-series-name {
            margin: 16px 0 2px;
            color: var(--md-sys-coloron-surface);
        }
    }
</style>

<style>
    .blog-list {
        display: grid;
        grid-template-columns: 1fr;
        gap: 16px;
        @media (min-width: 600px) and (max-width: 840px) {
            grid-template-columns: 1fr 1fr;
        }
        @media (min-width: 840px) and (max-width: 1200px) {
            grid-template-columns: 1fr 1fr 1fr;
        }
        @media (min-width: 1200px) and (max-width: 1600px) {
            grid-template-columns: 1fr 1fr 1fr 1fr;
        }
        @media (min-width: 1600px) {
            grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
        }
    }
</style>

<style>
    .blog-list-item {
        position: relative;
        border-radius: 16px;
        background-color: var(--md-sys-color-surface);
        border: 1px solid var(--md-sys-color-outline-variant);
        z-index: 0;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        overflow: clip;
        width: 100%;
        --md-ripple-hover-color: var(--md-sys-color-primary-container);
        transition-duration: 200ms;

        & > section {
            display: flex;
            flex-direction: column;
            padding-left: 1rem;
            padding-right: 1rem;
            padding-top: 1rem;
            padding-bottom: 1rem;

            & > .headline {
                color: var(--md-sys-color-on-surface);
                overflow: hidden;
                display: -webkit-box;
                -webkit-box-orient: vertical;
                -webkit-line-clamp: 2;
            }
            & > .description {
                color: var(--md-sys-color-on-surface-variant);
                overflow: hidden;
                display: -webkit-box;
                -webkit-box-orient: vertical;
                -webkit-line-clamp: 3;
            }
        }
        & > .file-name {
            padding-left: 1rem;
            padding-right: 1rem;
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
            overflow: hidden;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 2;
            color: var(--md-sys-color-on-surface-variant);
        }
        & > ul.tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            user-select: none;
            padding-bottom: 1rem;
            padding-left: 1rem;
            padding-right: 1rem;

            & > li.tag {
                background-color: var(--md-sys-color-surface-container);
                color: var(--md-sys-color-on-surface-variant);
                position: relative;
                border-radius: 0.375rem;
                px: 2px;
                padding-top: 0.25rem;
                padding-bottom: 0.25rem;
                padding-left: 0.5rem;
                padding-right: 0.5rem;
                pointer-events: none;
            }
        }

        &[invisible] {
            display: none;
        }
    }
    .blog-list-item:hover {
        border-radius: 28px;
    }
    .blog-list-item:active,
    .blog-list-item:hover:active,
    .blog-list-item:focus,
    .blog-list-item:focus-within {
    }
</style>

<!-- Tags Chip Set -->
<style>
    .tag-filter.chip-set {
    }
</style>

<style>
    .filter-container {
        margin-bottom: 16px;
    }
    .filter-panel {
        height: 100%;
        overflow: auto;
        &[data-open="false"] {
            display: none;
        }
        &[data-open="true"] {
            display: block;
        }
    }
</style>
