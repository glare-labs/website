---
import { getLangFromUrl } from "@/i18n/utils";
import { routes } from "../../router/routes";
import NavigationRailSwitchThemeButton from "./navigation-rail-switch-theme-button.astro";

const lang = getLangFromUrl(Astro.url);
const links = routes(Astro.url);
---

<nav transition:persist="navigation-rail-component" class="navigation-rail">
    <div class="start" aria-hidden="true"></div>
    <div class="tabs" role="list">
        {
            links
                .filter((link) => link.navigable)
                .map((link) => (
                    <span class="navigation-rail-tab" data-lang-href={lang} data-href={link.url} role="listitem" tabindex="0">
                        <span aria-hidden="true" class="indicator" />
                        <span aria-hidden="true" class="ripple-indicator-helper">
                            <md-ripple class="ripple" />
                        </span>
                        <md-icon class="icon" set:html={link.iconSvg} />
                        <md-focus-ring />
                        <span class="label md-typescale-label-medium">{link.label}</span>
                    </span>
                ))
        }
    </div>
    <div class="end">
        <NavigationRailSwitchThemeButton />
    </div>
</nav>

<script>
    import "@material/web/focus/md-focus-ring";
    import "@material/web/icon/icon";
    import "@material/web/ripple/ripple";
</script>

<script>
    import { MdRipple } from "@material/web/ripple/ripple";
    import { currentRouteUrl } from "@router/routes";
    import { navigate } from "astro:transitions/client";

    document.addEventListener("astro:page-load", (_) => {
        const rail = document.querySelector(".navigation-rail")! as HTMLElement;
        const tabContainer = rail.querySelector("&>.tabs")! as HTMLElement;
        const tabs = Array.from(tabContainer.querySelectorAll("&>.navigation-rail-tab") as NodeListOf<HTMLElement>);

        let abort = new AbortController();

        tabs.forEach((item) => {
            /**
             * @event click 為navigation-rail中的navigation-rail-tab設置頁面導行, 同時激活對應的navigation-rail-tab
             */
            item.addEventListener("click", async (e) => {
                e.preventDefault();
                if (abort.signal.aborted) {
                    return;
                }
                abort.abort();

                const lastTab = tabs.find((tab) => tab.classList.contains("active"));
                const clickedTab = e.target as HTMLElement;

                lastTab.classList.remove("active");
                lastTab.classList.add("inactive");
                setTimeout(() => {
                    lastTab.classList.remove("inactive");
                }, 100);
                clickedTab.classList.add("active");

                const href = (e.target as HTMLElement).getAttribute("data-href")!;
                const langHref = (e.target as HTMLElement).getAttribute("data-lang-href")!;

                new Promise<void>((resolve) => {
                    setTimeout(() => {
                        resolve();
                    }, 200);
                })
                    .then(() => {
                        return navigate(`/${langHref}${href}`, {
                            history: "replace",
                        });
                    })
                    .then(() => {
                        currentRouteUrl.set(href);
                    })
                    .then(() => {
                        abort = new AbortController();
                    });
            });

            if (item.classList.contains("active")) {
                item.classList.remove("active");
                item.classList.remove("inactive");
            }
        });

        /**
         * @event load 初始化navigation-rail默認激活的navigation-rail-tab
         */
        if (tabs.findIndex((tab: HTMLElement) => tab.classList.contains("active")) === -1) {
            tabs.forEach((tab: HTMLElement) => {
                const pathname = window.location.pathname;
                const current = `/${tab.getAttribute("data-lang-href")!}${tab.getAttribute("data-href")}`;

                if (current === pathname) {
                    tab.classList.add("active");
                }
            });
        }

        tabs.map((item: Element) => {
            const ripple = item.querySelector("&>.ripple-indicator-helper>.ripple");
            (ripple as MdRipple).attach(item as HTMLElement);
        });
    });

    // currentRouteUrl.subscribe((value) => {
    //     const tabs = Array.from(document.querySelectorAll(".navigation-rail>.tabs>.navigation-rail-tab") as NodeListOf<HTMLElement>);
    //     tabs.forEach((tab) => {
    //         if (tab.getAttribute("data-href") === value) {
    //             // tab.classList.add("active");
    //         }
    //     });
    // });
</script>

<!-- List handlekeydown event -->
<script>
    document.addEventListener("astro:page-load", () => {
        const navigationBar = document.querySelector(`.tabs`) as HTMLElement | null;

        navigationBar?.addEventListener("keydown", (e: KeyboardEvent) => {
            if (e.key === " " || e.code === "Space") {
                e.preventDefault();
                (e.target as HTMLElement).click();
            }
        });

        navigationBar?.addEventListener("focusin", (e) => {
            (e.target as HTMLElement).focus();
        });
    });
</script>

<style>
    body[dark="true"] .navigation-rail {
        border-right-width: 1px;
    }

    .navigation-rail {
        width: 84px;
        height: 100%;
        max-height: 100vh;
        background-color: var(--md-sys-color-surface-container);
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 0px;
        overflow: hidden;
        row-gap: 24px;
        overflow: auto;

        transition-property: background-color, color;
        transition-duration: 200ms;

        @media (min-width: 600px) and (max-width: 840px) {
            & > .tabs {
                justify-content: center;
            }
        }

        & > .start {
            display: grid;
            place-content: center;
        }
        & > .end {
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 48px;
            margin-bottom: 12px;
        }

        & > .tabs {
            --md-ripple-hover-color: var(--md-sys-color-on-secondary-container);
            --md-ripple-pressed-color: 0;
            --container-height: 56px;
            --container-width: 80px;
            --indicator-height: 32px;
            --active-indicator-width: 56px;
            --inactive-indicator-width: 32px;

            display: flex;
            flex-direction: column;
            gap: 8px;
            flex-grow: 1;
            user-select: none;

            & > .navigation-rail-tab {
                --md-focus-ring-shape: 12px;
                display: grid;
                grid-template-columns: 1fr;
                grid-template-rows: 1fr auto;
                align-items: center;
                gap: 8px;
                height: var(--container-height);
                position: relative;
                cursor: pointer;
                outline: none;

                & > * {
                    pointer-events: none;
                }

                & > :is(.indicator, .ripple-indicator-helper, .icon) {
                    grid-row: 1/2;
                    grid-column: 1/2;
                }
                & > .label {
                    grid-row: 2/3;
                    grid-column: 1/2;
                }

                & > .indicator {
                    place-self: center;
                    height: var(--indicator-height);
                    width: var(--inactive-indicator-width);
                    background-color: var(--md-sys-color-secondary-container);
                    opacity: 0;
                    border-radius: 16px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    overflow: hidden;
                    position: relative;
                    z-index: 1;

                    transition:
                        width 200ms cubic-bezier(0.4, 0, 0.2, 1),
                        opacity 200ms cubic-bezier(0.4, 0, 0.2, 1);
                }
                & > .ripple-indicator-helper {
                    height: var(--indicator-height);
                    width: var(--active-indicator-width);
                    border-radius: 16px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    overflow: hidden;
                    position: relative;
                    z-index: 0;
                }
                & > .icon {
                    place-self: center;
                    z-index: 1;
                    color: var(--md-sys-color-on-surface-variant);
                    fill: var(--md-sys-color-on-surface-variant);
                    transition-property: background-color, color, font-variation-settings, width;
                    transition-duration: 100ms;
                }

                & > .label {
                    text-align: center;
                    color: var(--md-sys-color-on-surface);
                }

                &.active {
                    .indicator {
                        opacity: 1;
                        width: var(--active-indicator-width);
                    }
                    .icon {
                        color: var(--md-sys-color-on-secondary-container);
                        fill: var(--md-sys-color-on-secondary-container);
                    }
                }
                &.inactive {
                    .indicator {
                        opacity: 0;
                        width: var(--inactive-indicator-width);
                        transition:
                            width 100ms cubic-bezier(0.4, 0, 0.2, 1),
                            opacity 100ms cubic-bezier(0.4, 0, 0.2, 1);
                    }
                }
            }
        }
    }
</style>
