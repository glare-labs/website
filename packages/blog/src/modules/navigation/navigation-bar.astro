---
import { routes } from "../../router/routes";
---

<md-navigation-bar transition:persist="bottom-app-bar" class="bottom-app-bar" id="bottom-app-bar-standalone-root">
    {
        routes.map((link) => (
            <md-navigation-tab data-href={`${link.url}`} label={link.label} class="bottom-app-tab">
                <md-icon class="inactive-icon" slot="inactive-icon" set:html={link.iconString} />
                <md-icon class="active-icon" slot="active-icon" set:html={link.iconString} />
            </md-navigation-tab>
        ))
    }
</md-navigation-bar>

<script>
    import "@material/web/icon/icon";
    import "@material/web/labs/navigationbar/navigation-bar";
    import "@material/web/labs/navigationtab/navigation-tab";
</script>

<script>
    import type { MdRipple } from "@material/web/all";
    import type { MdNavigationBar } from "@material/web/labs/navigationbar/navigation-bar";
    import type { MdNavigationTab } from "@material/web/labs/navigationtab/navigation-tab";
    import { currentRouteUrl } from "@router/routes";
    import { navigate } from "astro:transitions/client";

    document.addEventListener("astro:page-load", () => {
        const bar = document.querySelector<MdNavigationBar & HTMLElement>("#bottom-app-bar-standalone-root");

        const unboundRipple = (navigationBar: MdNavigationBar) => {
            const ripplHosts = navigationBar.querySelectorAll(".bottom-app-tab");
            ripplHosts.forEach((host) => {
                const ripple = host.shadowRoot!.querySelector<MdRipple & HTMLElement>(".md3-navigation-tab__ripple");
                ripple.style.setProperty("inset", "unset");
                ripple.style.setProperty("border-radius", "9999px");
                ripple.style.setProperty("height", "128px");
                ripple.style.setProperty("width", "128px");
                ripple.attach(host as HTMLElement);
            });
            ripplHosts.forEach((host) => {
                (host.shadowRoot!.querySelector(".md3-navigation-tab__active-indicator") as HTMLElement).style.setProperty("transition", `width 200ms cubic-bezier(0.4, 0, 0.2, 1), opacity 200ms cubic-bezier(0.4, 0, 0.2, 1)`);
            });
        };

        unboundRipple(bar);

        bar.tabs.forEach((tab: MdNavigationTab & HTMLElement) => {
            tab.addEventListener("click", async (_) => {
                await new Promise<void>((resolve) => setTimeout(() => resolve(), 200));
                navigate(tab.getAttribute("data-href")!, {
                    history: "replace",
                }).then(() => {
                    currentRouteUrl.set(tab.getAttribute("data-href")!);
                });
            });
        });

        window.addEventListener("navigation-up", (e) => {
            console.log(e);
        });
    });

    currentRouteUrl.subscribe((value) => {
        const bar = document.querySelector<MdNavigationBar & HTMLElement>("#bottom-app-bar-standalone-root");

        if (!bar.tabs) {
            return;
        }

        bar.tabs.forEach((tab: MdNavigationTab & HTMLElement) => {
            if (tab.getAttribute("data-href") === value) {
                bar.activeIndex = bar.tabs.findIndex((e) => e === tab);
            }
        });
    });
</script>

<style is:global>
    .bottom-app-bar {
        --md-navigation-bar-container-elevation: 0;

        overflow: hidden;
    }
</style>
