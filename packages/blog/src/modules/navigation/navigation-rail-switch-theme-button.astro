---
import LightModeSvg from "@material-design-icons/svg/round/light_mode.svg?raw";
import DarkModeSvg from "@material-design-icons/svg/round/dark_mode.svg?raw";
---

<md-icon-button id="navigation-rail-switch-theme-button" aria-label="Swicth theme" transition:persist="navigation-rail-switch-theme-button-component">
    <md-icon class="icon light" set:html={LightModeSvg} />
    <md-icon class="icon dark" set:html={DarkModeSvg} />
</md-icon-button>

<script>
    import "@material/web/icon/icon";
    import "@material/web/iconbutton/icon-button";
</script>

<script>
    import type { MdIconButton } from "@material/web/all";
    import { getMaterialThemeConfiguration } from "@shared/utils";

    const handleIconUpdate = (isDark: boolean) => {
        const iconLight = document.querySelector("#navigation-rail-switch-theme-button .icon.light") as MdIconButton | null;
        const iconDark = document.querySelector("#navigation-rail-switch-theme-button .icon.dark") as MdIconButton | null;
        if (isDark) {
            iconLight?.style.setProperty("display", "block");
            iconDark?.style.setProperty("display", "none");
        } else {
            iconLight?.style.setProperty("display", "none");
            iconDark?.style.setProperty("display", "block");
        }
    };

    const handleClick = () => {
        getMaterialThemeConfiguration().setIsDark(!getMaterialThemeConfiguration().getIsDark());
    };

    document.addEventListener("astro:page-load", (_) => {
        const darkButtonRef = document.querySelector("#navigation-rail-switch-theme-button") as MdIconButton | null;
        darkButtonRef?.addEventListener("click", handleClick);
    });

    /**
     * Init md-icon
     */
    getMaterialThemeConfiguration()
        .getAtom()
        .subscribe(({ isDark }) => {
            handleIconUpdate(isDark);
        });
</script>
