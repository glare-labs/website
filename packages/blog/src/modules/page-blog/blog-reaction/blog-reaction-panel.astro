---
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import CardTitle from "../card/card-title.astro";
import Card from "../card/card.astro";
import ThumbUpSvg from "@material-design-icons/svg/round/thumb_up.svg?raw";
import ThumbDownSvg from "@material-design-icons/svg/round/thumb_down.svg?raw";

interface Props {
    slug: string;
}

const { slug } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<Card>
    <CardTitle slot="title">{t("article-page.reaction.title")}</CardTitle>

    <div id="article-reaction" class="reaction" role="toolbar">
        <md-text-button class="positive-button" data-for-slug={slug}>
            {t("article-page.reaction.agree")}
            <md-icon slot="icon" set:html={ThumbUpSvg} />
        </md-text-button>
        <md-text-button class="negative-button" data-for-slug={slug}>
            {t("article-page.reaction.disagree")}
            <md-icon slot="icon" set:html={ThumbDownSvg} />
        </md-text-button>
    </div>

    <div id="article-reaction-result" class="reaction-result" data-for-slug={slug} data-open="false">
        <md-linear-progress id="reaction-percentage" min="0" max="100"></md-linear-progress>
        <div class="result-detail">
            <span class="detail-positive md-typescale-label-medium">
                {t("article-page.reaction.positive")}
                <span class="number"></span>
            </span>
            <span class="detail-negative md-typescale-label-medium">
                {t("article-page.reaction.negative")}
                <span class="number"></span>
            </span>
        </div>
    </div>
</Card>

<script>
    import "@material/web/progress/linear-progress";
</script>

<script is:inline>
    document.addEventListener("astro:page-load", () => {
        const reaction = document.querySelector("#article-reaction");
        const reactionResult = document.querySelector("#article-reaction-result");
        const progress = reactionResult.querySelector(`&>#reaction-percentage`);
        const slug = reactionResult.getAttribute("data-for-slug");

        fetch(`https://blog-database.function.glare-labs.uk/api/getCommends/${slug}`)
            .then((res) => res.json())
            .then((json) => {
                const { positive, negative } = json;
                const percentage = (positive * 100) / (positive + negative);

                progress.setAttribute("value", `${percentage}`);
                reactionResult.querySelector("&>.result-detail>.detail-positive>.number").textContent = positive;
                reactionResult.querySelector("&>.result-detail>.detail-negative>.number").textContent = negative;
                reactionResult.setAttribute("data-open", "true");
            })
            .catch((error) => {
                console.log(error);
                reactionResult.setAttribute("data-open", "false");
                reaction.setAttribute("open", "true");
            });

        reaction.addEventListener("commend-reaction", () => {
            reaction.setAttribute("open", "false");

            fetch(`https://blog-database.function.glare-labs.uk/api/getCommends/${slug}`)
                .then((res) => res.json())
                .then((json) => {
                    const { positive, negative } = json;
                    const percentage = (positive * 100) / (positive + negative);

                    progress.setAttribute("value", `${percentage}`);
                    reactionResult.querySelector("&>.result-detail>.detail-positive>.number").textContent = positive;
                    reactionResult.querySelector("&>.result-detail>.detail-negative>.number").textContent = negative;
                    reactionResult.setAttribute("data-open", "true");
                })
                .catch((error) => {
                    console.log(error);
                    reactionResult.setAttribute("data-open", "false");
                    reaction.setAttribute("open", "true");
                });
        });
    });
</script>

<script>
    document.addEventListener("astro:page-load", () => {
        const buttons = document.querySelectorAll(".positive-button");

        buttons.forEach((button) => {
            button.addEventListener("click", () => {
                button.setAttribute("soft-disabled", "");
                const reactionResult = document.querySelector("#article-reaction-result");
                const slug = reactionResult.getAttribute("data-for-slug");

                fetch(`https://blog-database.function.glare-labs.uk/api/recommendCommend/${slug}`, { method: "PUT", signal: AbortSignal.timeout(5000) })
                    .catch((error) => {
                        console.log(error);
                    })
                    .finally(() => {
                        button.dispatchEvent(new Event("commend-reaction", { bubbles: true }));
                    });
            });
        });
    });
</script>

<script>
    document.addEventListener("astro:page-load", () => {
        const buttons = document.querySelectorAll(".negative-button");

        buttons.forEach((button) => {
            button.addEventListener("click", () => {
                button.setAttribute("soft-disabled", "");
                const reactionResult = document.querySelector("#article-reaction-result");
                const slug = reactionResult.getAttribute("data-for-slug");

                fetch(`https://blog-database.function.glare-labs.uk/api/disagreeCommend/${slug}`, { method: "PUT", signal: AbortSignal.timeout(5000) })
                    .catch((error) => {
                        console.log(error);
                    })
                    .finally(() => {
                        button.dispatchEvent(new Event("commend-reaction", { bubbles: true }));
                    });
            });
        });
    });
</script>

<style>
    .reaction {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;

        &[open="false"] {
            display: none;
        }
    }

    .reaction-result {
        --md-linear-progress-active-indicator-color: var(--md-sys-color-primary-container);
        --md-linear-progress-track-color: var(--md-sys-color-error-container);
        --md-linear-progress-track-shape: 999px;
        margin-top: 8px;

        &[data-open="true"] {
            display: block;
            --md-linear-progress-track-height: 40px;
            --md-linear-progress-active-indicator-height: 40px;
        }
        &[data-open="false"] {
            display: none;
        }

        & > .result-detail {
            display: flex;
            justify-content: space-between;
            padding: 8px 24px;
            & > :is(.detail-positive, .detail-negative) {
                color: var(--md-sys-color-on-surface-variant);
            }
        }
    }
</style>
