---
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import PaletteSvg from "@material-design-icons/svg/round/palette.svg?raw";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div class="hct-picker">
    <md-icon-button id="hct-picker-window-toggle-button" aria-labelledby="#hct-picker-window-wrapper" aria-label="Open HCT theme picker">
        <md-icon set:html={PaletteSvg} />
    </md-icon-button>
    <md-menu id="hct-picker-window" anchor="hct-picker-window-toggle-button" ref="menuRef">
        <div class="sliders">
            <label class="field">
                <span class="label md-typescale-label-large">{t("chore.hue")}</span>
                <md-slider id="hue-picker-slider" max="360" min="0" step="1"></md-slider>
                <div class="preview" id="hue-picker-slider-preview"></div>
            </label>
            <label class="field">
                <span class="label md-typescale-label-large">{t("chore.chroma")}</span>
                <md-slider id="chroma-picker-slider" max="150" min="0" step="1"></md-slider>
                <div class="preview" id="chroma-picker-slider-preview"></div>
            </label>
            <label class="field">
                <span class="label md-typescale-label-large">{t("chore.tone")}</span>
                <md-slider id="tone-picker-slider" max="100" min="0" step="1"></md-slider>
                <div class="preview" id="tone-picker-slider-preview"></div>
            </label>
        </div>
    </md-menu>
</div>

<script>
    import "@material/web/icon/icon";
    import "@material/web/iconbutton/icon-button";
    import "@material/web/menu/menu";
    import "@material/web/slider/slider";
</script>

<script>
    import { Hct, hexFromArgb, SchemeFidelity } from "@material/material-color-utilities";
    import type { MdIconButton, MdMenu, MdSlider } from "@material/web/all";
    import { getMaterialThemeConfiguration } from "@shared/utils";

    const getElements = () => {
        const pickerWindow = document.querySelector("#hct-picker-window") as MdMenu | null;
        const toggleButton = document.querySelector("#hct-picker-window-toggle-button") as MdIconButton | null;
        const hue = document.querySelector("#hue-picker-slider") as MdSlider | null;
        const chroma = document.querySelector("#chroma-picker-slider") as MdSlider | null;
        const tone = document.querySelector("#tone-picker-slider") as MdSlider | null;

        const huePreview = document.querySelector("#hue-picker-slider-preview") as HTMLElement | null;
        const chromaPreview = document.querySelector("#chroma-picker-slider-preview") as HTMLElement | null;
        const tonePreview = document.querySelector("#tone-picker-slider-preview") as HTMLElement | null;

        return {
            pickerWindow,
            toggleButton,
            hue,
            huePreview,
            chroma,
            chromaPreview,
            tone,
            tonePreview,
        };
    };
    let updateSliderTimeout = null;

    const handleClick = () => {
        if (getElements().pickerWindow) {
            getElements().pickerWindow.open = !getElements().pickerWindow.open;
        }
    };

    const handleHueInput = (e: Event) => {
        const hueValue = (e.target as MdSlider).value;
        getMaterialThemeConfiguration().setSourceColorRawObject((raw) => ({
            ...raw,
            hue: hueValue,
        }));

        if (updateSliderTimeout !== null) {
            clearTimeout(updateSliderTimeout);
        }
        updateSliderTimeout = setTimeout(() => {
            updateChromaPewviewBackgroundProperty();
            updateTonePewviewBackgroundProperty();
        }, 50);
    };
    const handleChromaInput = (e: Event) => {
        const chromaValue = (e.target as MdSlider).value;
        getMaterialThemeConfiguration().setSourceColorRawObject((raw) => ({
            ...raw,
            chroma: chromaValue,
        }));
        if (updateSliderTimeout !== null) {
            clearTimeout(updateSliderTimeout);
        }
        updateSliderTimeout = setTimeout(() => {
            updateTonePewviewBackgroundProperty();
        }, 50);
    };
    const handleToneInput = (e: Event) => {
        const toneValue = (e.target as MdSlider).value;
        getMaterialThemeConfiguration().setSourceColorRawObject((raw) => ({
            ...raw,
            tone: toneValue,
        }));
    };
    const generateHue = () => {
        const colorArray = [];
        for (let i = 0; i <= 36; i++) {
            const md = new SchemeFidelity(Hct.from(i * 10, 75, 50), false, 0);
            colorArray.push(hexFromArgb(md.primaryPaletteKeyColor));
        }
        return `${colorArray}`;
    };
    const generateChroma = (hue: number) => {
        const colorArray = [];
        for (let i = 0; i <= 6; i++) {
            const md = new SchemeFidelity(Hct.from(hue, i * 25, 50), false, 0);
            colorArray.push(hexFromArgb(md.primaryPaletteKeyColor));
        }
        return `${colorArray}`;
    };
    const generateTone = (hue: number, chroma: number) => {
        const colorArray = [];
        for (let i = 0; i <= 5; i++) {
            const md = new SchemeFidelity(Hct.from(hue, chroma, i * 20), false, 0);
            colorArray.push(hexFromArgb(md.primaryPaletteKeyColor));
        }
        return `${colorArray}`;
    };
    const updateHuePewviewBackgroundProperty = () => {
        if (getElements().huePreview) {
            getElements().huePreview.style.setProperty("background", `linear-gradient(to right, ${generateHue()})`);
        }
    };
    const updateChromaPewviewBackgroundProperty = () => {
        if (getElements().chromaPreview) {
            getElements().chromaPreview.style.setProperty("background", `linear-gradient(to right, ${generateChroma(getMaterialThemeConfiguration().getSourceColorHctRawObject().hue)})`);
        }
    };
    const updateTonePewviewBackgroundProperty = () => {
        if (getElements().tonePreview) {
            getElements().tonePreview.style.setProperty("background", `linear-gradient(to right, ${generateTone(getMaterialThemeConfiguration().getSourceColorHctRawObject().hue, getMaterialThemeConfiguration().getSourceColorHctRawObject().chroma)})`);
        }
    };
    const initSliderValue = () => {
        const required = [getElements().hue, getElements().chroma, getElements().tone];
        if (required.includes(null)) {
            return;
        }
        const { chroma: c, hue: h, tone: t } = getMaterialThemeConfiguration().getSourceColorHctRawObject();
        getElements().hue.value = h;
        getElements().chroma.value = c;
        getElements().tone.value = t;
    };
    document.addEventListener("astro:page-load", (_) => {
        initSliderValue();
        updateHuePewviewBackgroundProperty();
        updateChromaPewviewBackgroundProperty();
        updateTonePewviewBackgroundProperty();

        getElements().toggleButton?.addEventListener("click", handleClick);
        getElements().hue?.addEventListener("input", handleHueInput);
        getElements().chroma?.addEventListener("input", handleChromaInput);
        getElements().tone?.addEventListener("input", handleToneInput);
    });
</script>

<style>
    .hct-picker {
        position: relative;
    }

    .sliders {
        display: flex;
        flex-direction: column;
        gap: 4px;
        padding: 18px;

        .field {
            & > .label {
                display: block;
                margin-top: 4px;
            }
        }
        .preview {
            display: block;
            padding: 0 18px;
            height: 28px;
        }
    }
</style>
