---

---

<div class="sliders">
    <label class="field">
        <span class="label md-typescale-label-large">Hue</span>
        <md-slider id="page-settings-hct-slider-hue" step="1" min="0" max="360"></md-slider>
        <div class="preview" id="picker-slider-preview-hue"></div>
    </label>
    <label class="field">
        <span class="label md-typescale-label-large">Chroma</span>
        <md-slider id="page-settings-hct-slider-chroma" step="1" min="0" max="150"></md-slider>
        <div class="preview" id="picker-slider-preview-chroma"></div>
    </label>
    <label class="field">
        <span class="label md-typescale-label-large">Tone</span>
        <md-slider id="page-settings-hct-slider-tone" step="1" min="0" max="90"></md-slider>
        <div class="preview" id="picker-slider-preview-tone"></div>
    </label>
</div>

<script>
    import "@material/web/slider/slider";
</script>

<script>
    import { Hct, hexFromArgb, SchemeFidelity } from "@material/material-color-utilities";
    import type { MdSlider } from "@material/web/all";
    import { getMaterialThemeConfiguration } from "@shared/utils";

    document.addEventListener("astro:page-load", () => {
        const hue = document.querySelector("#page-settings-hct-slider-hue") as MdSlider | null;
        const chroma = document.querySelector("#page-settings-hct-slider-chroma") as MdSlider | null;
        const tone = document.querySelector("#page-settings-hct-slider-tone") as MdSlider | null;

        const huePreview = document.querySelector("#picker-slider-preview-hue") as HTMLElement | null;
        const chromaPreview = document.querySelector("#picker-slider-preview-chroma") as HTMLElement | null;
        const tonePreview = document.querySelector("#picker-slider-preview-tone") as HTMLElement | null;

        let updateSliderTimeout = null;

        const handleHueInput = (e: Event) => {
            const hueValue = (e.target as MdSlider).value;
            getMaterialThemeConfiguration().setSourceColorRawObject((raw) => ({
                ...raw,
                hue: hueValue,
            }));

            if (updateSliderTimeout !== null) {
                clearTimeout(updateSliderTimeout);
            }
            updateSliderTimeout = setTimeout(() => {
                updateChromaPewviewBackgroundProperty();
                updateTonePewviewBackgroundProperty();
            }, 50);
        };
        const handleChromaInput = (e: Event) => {
            const chromaValue = (e.target as MdSlider).value;
            getMaterialThemeConfiguration().setSourceColorRawObject((raw) => ({
                ...raw,
                chroma: chromaValue,
            }));
            if (updateSliderTimeout !== null) {
                clearTimeout(updateSliderTimeout);
            }
            updateSliderTimeout = setTimeout(() => {
                updateTonePewviewBackgroundProperty();
            }, 50);
        };
        const handleToneInput = (e: Event) => {
            const toneValue = (e.target as MdSlider).value;
            getMaterialThemeConfiguration().setSourceColorRawObject((raw) => ({
                ...raw,
                tone: toneValue,
            }));
        };
        const generateHue = () => {
            const colorArray = [];
            for (let i = 0; i <= 36; i++) {
                const md = new SchemeFidelity(Hct.from(i * 10, 75, 50), false, 0);
                colorArray.push(hexFromArgb(md.primaryPaletteKeyColor));
            }
            return `${colorArray}`;
        };
        const generateChroma = (hue: number) => {
            const colorArray = [];
            for (let i = 0; i <= 6; i++) {
                const md = new SchemeFidelity(Hct.from(hue, i * 25, 50), false, 0);
                colorArray.push(hexFromArgb(md.primaryPaletteKeyColor));
            }
            return `${colorArray}`;
        };
        const generateTone = (hue: number, chroma: number) => {
            const colorArray = [];
            for (let i = 0; i <= 5; i++) {
                const md = new SchemeFidelity(Hct.from(hue, chroma, i * 20), false, 0);
                colorArray.push(hexFromArgb(md.primaryPaletteKeyColor));
            }
            return `${colorArray}`;
        };
        const updateHuePewviewBackgroundProperty = () => {
            if (huePreview) {
                huePreview.style.setProperty("background", `linear-gradient(to right, ${generateHue()})`);
            }
        };
        const updateChromaPewviewBackgroundProperty = () => {
            if (chromaPreview) {
                chromaPreview.style.setProperty("background", `linear-gradient(to right, ${generateChroma(getMaterialThemeConfiguration().getSourceColorHctRawObject().hue)})`);
            }
        };
        const updateTonePewviewBackgroundProperty = () => {
            if (tonePreview) {
                tonePreview.style.setProperty("background", `linear-gradient(to right, ${generateTone(getMaterialThemeConfiguration().getSourceColorHctRawObject().hue, getMaterialThemeConfiguration().getSourceColorHctRawObject().chroma)})`);
            }
        };
        const initSliderValue = () => {
            const required = [hue, chroma, tone];
            if (required.includes(null)) {
                return;
            }
            const { chroma: c, hue: h, tone: t } = getMaterialThemeConfiguration().getSourceColorHctRawObject();
            hue.value = h;
            chroma.value = c;
            tone.value = t;
        };

        initSliderValue();
        updateHuePewviewBackgroundProperty();
        updateChromaPewviewBackgroundProperty();
        updateTonePewviewBackgroundProperty();

        hue?.addEventListener("input", handleHueInput);
        chroma?.addEventListener("input", handleChromaInput);
        tone?.addEventListener("input", handleToneInput);
    });
</script>

<style>
    .sliders {
        display: flex;
        flex-direction: column;
        gap: 4px;

        .field {
            & > .label {
                display: block;
                margin-top: 4px;
            }
            & > md-slider {
                display: block;
            }
        }
        .preview {
            display: block;
            height: 32px;
        }
    }
</style>
