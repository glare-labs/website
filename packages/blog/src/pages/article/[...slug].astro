---
import "@fontsource/jetbrains-mono";
import { GlobalStyles } from "@modules/global";
import { PageBodyLayout } from "@modules/page-body";
import { PageFooter } from "@modules/page-footer";
import { parseHeadings } from "@shared/utils";
import HeaderMaterialHctPicker from "@modules/page-header/header-material-hct-picker.astro";
import HeaderSwitchThemeButton from "@modules/page-header/header-switch-theme-button.astro";
import { ImportJetbrainsMonoStyle, ImportMaterialSymbols, MaterialThemeScript, PageMetaInfo } from "@shared/components";
import { PageHeaderLayout, PageRootHtmlLayout } from "@shared/layouts";
import { getCollection, type CollectionEntry } from "astro:content";
import { ViewTransitions } from "astro:transitions";
import { BlogCommentPanel, BlogReactionPanel } from "@modules/page-blog";
import BlogOverview from "@modules/page-blog/overview/blog-overview.astro";

export async function getStaticPaths() {
    /**
     * Please complete the code here.
     * Please confirm that there is an mdx file in the src/content/blogs/* folder.
     *
     * This project provides `blog` folder by default.
     */
    const posts = await getCollection("article");

    /**
     * Copied.
     * @link https://docs.astro.build/en/guides/markdown-content/#example-dynamic-page-routing
     */
    return posts.map((post) => ({
        params: {
            slug: post.slug,
        },
        props: {
            article: post,
        },
    }));
}
interface Props {
    article: CollectionEntry<"article">;
}

const { article } = Astro.props;
const { Content } = await article.render();

const headings = parseHeadings(article.body);
---

<PageRootHtmlLayout>
    <PageMetaInfo
        slot="head"
        author="bre97"
        description={article.data.description}
        title={`${article.data.headline} - Bre97's Blog`}
        iconHref="/glare-labs-page-icon.svg"
        keywords={article.data.tags.join()}
        language="en-US"
        url={`https://blog.glare-labs.uk/article/${article.slug}/`}
        imageUrl="https://media.glare-labs.uk/blog-logo.png"
        imageAlt="Bre97's Blog"
        robots="index, follow"
        ogType="website"
    />

    <ImportJetbrainsMonoStyle slot="head" />
    <MaterialThemeScript slot="head" />
    <GlobalStyles slot="head" />
    <ImportMaterialSymbols slot="head" />
    <ViewTransitions slot="head" />

    <PageBodyLayout>
        <span id="page-header" data-show-title="false">
            <PageHeaderLayout>
                <a slot="start" class="back-to-all-post-page-button" target="_self" href={`/library/`} data-astro-reload>
                    <md-icon-button>
                        <md-icon>arrow_back</md-icon>
                    </md-icon-button>
                </a>
                <span id="page-header-title" class="md-typescale-title-medium">
                    {article.data.headline}
                </span>
                <HeaderSwitchThemeButton slot="actions" />
                <HeaderMaterialHctPicker slot="actions" />
                <md-icon-button id="catalog-controller" slot="actions">
                    <md-icon>menu_open</md-icon>
                </md-icon-button>
            </PageHeaderLayout>
        </span>

        <div class="width-forced">
            {
                article.data.imageUrl.length !== 0 && (
                    <div aria-hidden="true" id="image-before-article">
                        <div class="image" style={`background-image: url("https://media.glare-labs.uk/${article.data.imageUrl}")`} />
                    </div>
                )
            }
            <BlogOverview context={article.body} />
        </div>

        <article id="article">
            <section id="article-content" class="prose">
                <Content />
            </section>

            <section id="article-footer" class="content">
                <ul class="article-tags md-typescale-label-small">
                    {article.data.tags?.map((tag) => <li class="tag">{tag}</li>)}
                </ul>
                <p id="article-slug" data-slug={article.slug} class="md-typescale-label-small">
                    {article.slug}
                </p>
                <div class="divider" aria-hidden="true">
                    <svg aria-hidden="true" width="100%" height="8" fill="none" xmlns="http://www.w3.org/2000/svg"
                        ><pattern id="a" width="91" height="8" patternUnits="userSpaceOnUse"
                            ><g clip-path="url(#clip0_2426_11367)"
                                ><path
                                    d="M114 4c-5.067 4.667-10.133 4.667-15.2 0S88.667-.667 83.6 4 73.467 8.667 68.4 4 58.267-.667 53.2 4 43.067 8.667 38 4 27.867-.667 22.8 4 12.667 8.667 7.6 4-2.533-.667-7.6 4s-10.133 4.667-15.2 0S-32.933-.667-38 4s-10.133 4.667-15.2 0-10.133-4.667-15.2 0-10.133 4.667-15.2 0-10.133-4.667-15.2 0-10.133 4.667-15.2 0-10.133-4.667-15.2 0-10.133 4.667-15.2 0-10.133-4.667-15.2 0-10.133 4.667-15.2 0-10.133-4.667-15.2 0-10.133 4.667-15.2 0-10.133-4.667-15.2 0-10.133 4.667-15.2 0-10.133-4.667-15.2 0-10.133 4.667-15.2 0-10.133-4.667-15.2 0-10.133 4.667-15.2 0-10.133-4.667-15.2 0-10.133 4.667-15.2 0-10.133-4.667-15.2 0-10.133 4.667-15.2 0-10.133-4.667-15.2 0-10.133 4.667-15.2 0-10.133-4.667-15.2 0-10.133 4.667-15.2 0"
                                    stroke="#E1E3E1"
                                    stroke-linecap="square"></path></g
                            ></pattern
                        ><rect width="100%" height="100%" fill="url(#a)"></rect>
                    </svg>
                </div>
            </section>

            <nav id="article-references"></nav>

            <nav id="article-catalog" data-open="true">
                <ul class="heading-list">
                    {
                        headings.flatMap((heading) => (
                            <li data-heading-headline={heading.headline} class={`heading level-${heading.level} md-typescale-label-medium`}>
                                <a target="_self" href={heading.href}>
                                    {heading.headline}
                                </a>
                            </li>
                        ))
                    }
                </ul>
            </nav>
        </article>

        <div class="width-forced">
            <BlogReactionPanel slug={article.slug} />
            <BlogCommentPanel slug={article.slug} />
            <PageFooter />
        </div>
    </PageBodyLayout>
</PageRootHtmlLayout>

<script>
    import "@material/web/button/filled-button";
    import "@material/web/button/text-button";
    import "@material/web/icon/icon";
    import "@material/web/iconbutton/icon-button";
    import "@material/web/progress/circular-progress";
    import "@material/web/textfield/outlined-text-field";
</script>

<script is:inline>
    const getElements = () => {
        const header = document.querySelector("#page-header");
        const articleTitle = document.querySelector("#article>#article-content>h1");

        return {
            header,
            articleTitle,
        };
    };

    const onWindowScroll = () => {
        const { top, height } = getElements().articleTitle.getBoundingClientRect();
        if (top + height - getElements().header.getBoundingClientRect().height <= 0) {
            getElements().header.setAttribute("data-show-title", "true");
        } else {
            getElements().header.setAttribute("data-show-title", "false");
        }
    };

    document.addEventListener("astro:page-load", () => {
        onWindowScroll();
        window.addEventListener("scroll", onWindowScroll, { passive: true, capture: true });
    });
</script>

<!-- Get current heading -->
<script is:inline>
    document.addEventListener("astro:page-load", () => {
        const allHeadings = document.querySelectorAll("#article-content>:is(h1,h2,h3)[id]");
        const catalogHeadings = document.querySelectorAll("#article-catalog [data-heading-headline]");

        const updateHeading = (activeHeading) => {
            for (const heading of catalogHeadings) {
                heading.setAttribute("active", "false");
            }
            for (const heading of catalogHeadings) {
                if (heading.getAttribute("data-heading-headline") === activeHeading.textContent) {
                    heading.setAttribute("active", "true");
                    break;
                }
            }
        };

        if (allHeadings.length !== 0) {
            window.addEventListener(
                "scroll",
                (e) => {
                    const sorted = allHeadings
                        .values()
                        .toArray()
                        .map((e) => ({ element: e, top: e.getBoundingClientRect().top }))
                        .sort((x, y) => x.top - y.top);

                    let nearElementTop = sorted.filter((e) => e.top < 0).at(-1);
                    let nearElementBottom = sorted.filter((e) => e.top >= 0)[0];

                    if (typeof nearElementBottom === "undefined") {
                        updateHeading(nearElementTop.element);
                        return;
                    }
                    if (typeof nearElementTop === "undefined") {
                        updateHeading(nearElementBottom.element);
                        return;
                    }

                    if (nearElementBottom.top < document.body.clientHeight / 3) {
                        updateHeading(nearElementBottom.element);
                        return;
                    }
                    updateHeading(nearElementTop.element);
                },
                { passive: true, capture: true }
            );
        }
    });
</script>

<!-- Catalog controller -->
<script is:inline>
    document.addEventListener("astro:page-load", () => {
        const controller = document.querySelector("#catalog-controller");
        const catalog = document.querySelector("#article-catalog");

        controller.addEventListener("click", () => {
            if (catalog.getAttribute("data-open").toString() === "true") {
                catalog.setAttribute("data-open", "false");
            } else {
                catalog.setAttribute("data-open", "true");
            }
        });
    });
</script>

<!-- Page Header -->
<style>
    #page-header {
        position: sticky;
        top: 0;
        z-index: 2;
        transition-property: background-color;
        transition-duration: 200ms;

        & #page-header-title {
            color: var(--md-sys-color-on-surface);
            transition-property: opacity, top;
            transition-duration: 200ms;
            position: relative;
            overflow: hidden;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 1;
            transition-property: opacity, top;
            transition-duration: 200ms;
        }

        &[data-show-title="true"] {
            --header-drop-background-color: var(--md-sys-color-surface-container);
            --header-container-color: var(--md-sys-color-surface-container);

            & #page-header-title {
                opacity: 1;
                top: 0;
            }
        }
        &[data-show-title="false"] #page-header-title {
            opacity: 0;
            top: 16px;
            --header-drop-background-color: var(--md-sys-color-surface);
            --header-container-color: var(--md-sys-color-surface);
        }
    }
</style>

<!-- Article -->
<style>
    #article {
        /* The height prop of the header component's is not writtable. It's used for computing content height. */
        --header-height: 64px;

        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: auto;
        overflow: clip;

        @media (min-width: 840px) {
            grid-template-columns: 32px 1fr auto;
        }

        &:has(#article-catalog[data-open="false"]) {
            grid-template-columns: 32px 1fr 0;
        }

        #article-content {
            --space-y: 16px;
            --space-x: 16px;
            margin: var(--space-y) var(--space-x);
            grid-column: 1/3;
            grid-row: 1/2;
            @media (min-width: 840px) {
                grid-column: 2/3;
                grid-row: 1/2;
            }
        }
        #article-footer {
            --space-y: 16px;
            --space-x: 16px;
            margin: var(--space-y) var(--space-x);
            grid-column: 2/3;
            grid-row: 2/3;

            & > #article-slug {
                color: var(--md-sys-color-on-surface);
            }

            & > .article-tags {
                display: flex;
                gap: 4px;
                margin-bottom: 16px;

                & > .tag {
                    padding: 4px;
                    border-radius: 4px;
                    background-color: var(--md-sys-color-surface-container-high);
                    color: var(--md-sys-color-on-surface);
                }
            }

            & > .divider {
                margin: 32px 0;
            }
        }
        #article-references {
            --space-y: 16px;
            --space-x: 16px;
            display: none;
            grid-column: 1/2;
            grid-row: 1/-1;
            position: sticky;
            top: calc(var(--header-height) + var(--space-y));
            width: 280px;
            background-color: var(--md-sys-color-surface-container);
            border-radius: 28px;
            padding: 16px;
            margin: 0 var(--space-x);

            max-height: calc(100svh - var(--header-height) - (2 * var(--space-y)));
            min-height: calc(100svh - var(--header-height) - (2 * var(--space-y)));
            overflow: auto;
        }
        #article-catalog {
            --space-y: 16px;
            --space-x: 16px;

            width: 280px;
            z-index: 1;
            position: fixed;
            right: 0;
            top: calc(var(--header-height));
            margin: var(--space-y) var(--space-x);

            @media (min-width: 840px) {
                grid-column: 3/4;
                grid-row: 1/-1;
                position: sticky;
                top: calc(var(--header-height) + var(--space-y));
            }

            --height: calc(100svh - var(--header-height) - (2 * var(--space-y)));

            max-height: var(--height);
            min-height: var(--height);
            overflow: auto;

            transition-property: color, background-color, opacity, transform;
            transition-duration: 200ms;

            &[data-open="true"] {
            }
            &:not([data-open="true"]) {
                opacity: 0;
                transform: translateX(100%);
            }

            & .heading-list {
                background-color: var(--md-sys-color-surface-container);
                border-radius: 28px;
                max-height: var(--height);
                min-height: var(--height);
                display: flex;
                flex-direction: column;
                z-index: 2;
                position: relative;
                padding: 18px;

                & .heading {
                    display: flex;
                    align-items: center;
                    padding: 12px;
                    border-radius: 12px;
                    transition-property: color, background-color;
                    transition-duration: 150ms;

                    & > a {
                        overflow: hidden;
                        display: -webkit-box;
                        -webkit-box-orient: vertical;
                        -webkit-line-clamp: 1;
                    }

                    & > a:hover {
                        text-decoration-line: underline;
                        text-underline-offset: 2px;
                    }

                    &[active="true"] {
                        color: var(--md-sys-color-on-secondary-container);
                        background-color: var(--md-sys-color-secondary-container);
                    }
                    &:not([active="true"]) {
                        color: var(--md-sys-color-on-surface-variant);
                    }

                    &.level-1 {
                        margin-left: 0px;
                        list-style-type: disc;
                    }
                    &.level-2 {
                        margin-left: 16px;
                        list-style-type: circle;
                    }
                    &.level-3 {
                        margin-left: 32px;
                        list-style-type: disc;
                    }
                }
            }
        }
    }
</style>

<style is:global>
    html,
    body,
    * {
        scroll-behavior: smooth !important;
    }

    .prose {
        margin-top: 64px;
        color: var(--md-sys-color-on-surface);
        margin-bottom: calc(100svh - 224px - var(--header-height));

        & h1 {
            font: var(--md-sys-typescale-display-large-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-display-large-size, 3.5625rem) / var(--md-sys-typescale-display-large-line-height, 4rem) var(--md-sys-typescale-display-large-font, var(--md-ref-typeface-brand, Roboto));
        }
        & h2 {
            font: var(--md-sys-typescale-headline-large-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-headline-large-size, 2rem) / var(--md-sys-typescale-headline-large-line-height, 2.5rem) var(--md-sys-typescale-headline-large-font, var(--md-ref-typeface-brand, Roboto));
        }

        & h3 {
            font: var(--md-sys-typescale-headline-medium-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-headline-medium-size, 1.75rem) / var(--md-sys-typescale-headline-medium-line-height, 2.25rem) var(--md-sys-typescale-headline-medium-font, var(--md-ref-typeface-brand, Roboto));
        }
        & :is(h4, h5, h6) {
            font: var(--md-sys-typescale-headline-small-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-headline-small-size, 1.5rem) / var(--md-sys-typescale-headline-small-line-height, 2rem) var(--md-sys-typescale-headline-small-font, var(--md-ref-typeface-brand, Roboto));
        }
        & p {
            font: var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-body-large-size, 1rem) / var(--md-sys-typescale-body-large-line-height, 1.75rem) var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto));
        }

        & :is(h2, h3, h4, h5, h6) {
            color: var(--md-sys-color-on-surface);
        }
        & :is(h1, h2, h3, h4, h5, h6) {
            margin-top: -64px;
            padding-top: 96px;
            margin-bottom: 32px;
        }

        & :is(h2, h3, h4, h5, h6) + p {
            margin-bottom: 2rem;
            margin-top: 0.5rem;
        }

        & pre {
            border-width: 1px;
            border-radius: 18px;
            padding: 1rem;
            max-width: 100%;
            overflow: auto;
            margin-top: 16px;
            margin-bottom: 24px;
            font-size: 14px;
            line-height: 24px;
        }

        & table {
            font-size: 14px;
            border-radius: 18px;
            overflow: auto;
            outline-style: solid;
            margin-left: auto;
            margin-right: auto;
            margin-top: 2rem;
            margin-bottom: 2rem;

            & tr,
            & td {
                text-wrap: wrap;
                text-overflow: ellipsis;
                white-space: wrap;
                word-wrap: break-word;
            }

            & :is(thead, tbody) > tr > :is(th, td) {
                padding-left: 1rem;
                padding-right: 1rem;
                padding-top: 0.5rem;
                padding-bottom: 0.5rem;
                min-width: 1.5rem;
                text-align: start;
                overflow: auto;
            }

            & :is(thead, tbody) {
                overflow: auto;
                color: var(--md-sys-color-on-surface);
            }

            & thead {
                font-weight: 700;
                background-color: var(--md-sys-color-secondary-container);
                color: var(--md-sys-color-on-secondary-container);
            }

            & tbody tr:nth-of-type(2n) {
                background-color: var(--md-sys-color-surface-container);
            }
        }

        & ul {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            padding-left: 2rem;

            & li {
                list-style-type: disc;
                font-size: 16px;
            }

            & li:last-child {
                margin-bottom: 2rem;
            }
        }

        & ol {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            padding-left: 2rem;

            & li {
                list-style-type: decimal;
                font-size: 16px;
            }

            & li:last-child {
                margin-bottom: 8px;
            }
        }
    }
</style>

<style>
    .width-forced {
        max-width: 1200px;
        margin: 0 auto;
    }
</style>

<!-- Image before article -->
<style>
    #image-before-article {
        & > .image {
            display: block;
            height: 320px;
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            width: 100%;
            overflow: hidden;
        }
    }
</style>
