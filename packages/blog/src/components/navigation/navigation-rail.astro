---
import { routes } from "../../router/routes";
import NavigationRailSwitchThemeButton from "./navigation-rail-switch-theme-button.astro";
---

<div transition:persist="navigation-rail-component" class="navigation-rail">
    <div class="start"></div>
    <div class="tabs">
        {
            routes.map((link) => (
                <span class="navigation-rail-tab" data-href={link.url}>
                    <span aria-hidden="true" class="indicator" />
                    <span aria-hidden="true" class="ripple-indicator-helper">
                        <md-ripple class="ripple" />
                    </span>
                    <md-icon class="icon">{link.iconString}</md-icon>
                    <span class="label md-typescale-label-medium">{link.label}</span>
                </span>
            ))
        }
    </div>
    <div class="end">
        <NavigationRailSwitchThemeButton />
    </div>
</div>

<script>
    import "@material/web/icon/icon";
    import "@material/web/ripple/ripple";
</script>

<script>
    import { MdRipple } from "@material/web/ripple/ripple";
    import { currentRouteUrl } from "@router/routes";
    import { navigate } from "astro:transitions/client";

    document.addEventListener("astro:page-load", (_) => {
        const rail = document.querySelector(".navigation-rail")! as HTMLElement;
        const tabContainer = rail.querySelector("&>.tabs")! as HTMLElement;
        const tabs = Array.from(tabContainer.querySelectorAll("&>.navigation-rail-tab") as NodeListOf<HTMLElement>);

        let abort = new AbortController();

        /**
         * @event click 為navigation-rail中的navigation-rail-tab設置頁面導行, 同時激活對應的navigation-rail-tab
         */
        tabs.forEach((item) => {
            item.addEventListener("click", async (e) => {
                if (abort.signal.aborted) {
                    return;
                }
                abort.abort();

                tabs.forEach((tab) => {
                    if (tab.classList.contains("active")) {
                        tab.classList.remove("active");
                    }
                });
                (e.target as HTMLElement).classList.add("active");

                new Promise<void>((resolve) => {
                    setTimeout(() => {
                        resolve();
                    }, 200);
                })
                    .then(() => {
                        return navigate((e.target as HTMLElement).getAttribute("data-href")!, {
                            history: "replace",
                        });
                    })
                    .then(() => {
                        currentRouteUrl.set((e.target as HTMLElement).getAttribute("data-href")!);
                    })
                    .then(() => {
                        abort = new AbortController();
                    });
            });
        });

        /**
         * @event load 初始化navigation-rail默認激活的navigation-rail-tab
         */
        if (tabs.findIndex((tab: HTMLElement) => tab.classList.contains("active")) === -1) {
            const url = new URL(window.location.href);
            tabs.forEach((tab) => {
                if (tab.getAttribute("data-href")! === url.pathname) {
                    tab.classList.add("active");
                }
            });
        }

        tabs.map((item: Element) => {
            const ripple = item.querySelector("&>.ripple-indicator-helper>.ripple");
            (ripple as MdRipple).attach(item as HTMLElement);
        });
    });

    currentRouteUrl.subscribe((value) => {
        const tabs = Array.from(document.querySelectorAll(".navigation-rail>.tabs>.navigation-rail-tab") as NodeListOf<HTMLElement>);

        tabs.forEach((tab) => {
            if (tab.classList.contains("active")) {
                tab.classList.remove("active");
            }
        });
        tabs.forEach((tab) => {
            if (tab.getAttribute("data-href") === value) {
                tab.classList.add("active");
            }
        });
    });
</script>

<style>
    .navigation-rail {
        width: 84px;
        height: 100%;
        background-color: var(--md-sys-color-surface-container);
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 24px 0px;
        overflow: hidden;
        row-gap: 24px;

        @media (min-width: 600px) and (max-width: 840px) {
            & > .tabs {
                justify-content: center;
            }
        }

        & > .start {
            display: grid;
            place-content: center;
        }

        & > .tabs {
            --container-height: 56px;
            --container-width: 80px;
            --indicator-height: 32px;
            --active-indicator-width: 56px;
            --inactive-indicator-width: 32px;
            --_width: var(--inactive-indicator-width);

            display: flex;
            flex-direction: column;
            gap: 8px;
            flex-grow: 1;
            overflow: auto;
            user-select: none;

            & > .navigation-rail-tab {
                display: grid;
                grid-template-columns: 1fr;
                grid-template-rows: 1fr auto;
                /* flex-direction: column; */
                align-items: center;
                gap: 8px;
                height: var(--container-height);
                position: relative;
                cursor: pointer;

                & > * {
                    pointer-events: none;
                }

                & > :is(.indicator, .ripple-indicator-helper, .icon) {
                    grid-row: 1/2;
                    grid-column: 1/2;
                }
                & > .label {
                    grid-row: 2/3;
                    grid-column: 1/2;
                }

                & > .indicator {
                    place-self: center;
                    height: var(--indicator-height);
                    width: var(--_width);
                    border-radius: 16px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    overflow: hidden;
                    position: relative;
                    z-index: 1;

                    transition:
                        width 200ms cubic-bezier(0.4, 0, 0.2, 1),
                        opacity 200ms cubic-bezier(0.4, 0, 0.2, 1);
                }
                & > .ripple-indicator-helper {
                    height: var(--indicator-height);
                    width: var(--active-indicator-width);
                    border-radius: 16px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    overflow: hidden;
                    position: relative;
                    z-index: 0;
                }
                & > .icon {
                    place-self: center;
                    z-index: 1;
                    color: var(--md-sys-color-on-surface);
                    transition-property: background-color, color, font-variation-settings, width;
                    transition-duration: 100ms;
                }

                & > .label {
                    text-align: center;
                    color: var(--md-sys-color-on-surface);
                }

                &:hover {
                    & > .ripple-indicator-helper {
                        /* background-color: var(); */
                    }
                }

                &.active {
                    --_width: var(--active-indicator-width);
                    .indicator {
                        opacity: 1;
                        background-color: var(--md-sys-color-secondary-container);
                    }
                    .icon {
                        font-variation-settings:
                            "FILL" 1,
                            "wght" 400,
                            "GRAD" 0,
                            "opsz" 24;
                        color: var(--md-sys-color-on-secondary-container);
                        fill: var(--md-sys-color-on-secondary-container);
                    }
                }
                &:not(.active) {
                    --_width: var(--inactive-indicator-width);
                    .indicator {
                        opacity: 0;
                    }
                }
            }
        }
    }
</style>
