---
/**
 * This page will show all mdx files.
 * @url /blog
 */

import { getCollection } from "astro:content";
import { ViewTransitions } from "astro:transitions";
import BaseHead from "@modules/blogs-module/core/head/base-head.astro";
import ProductRootHtmlLayout from "src/layouts/ProductRootHtmlLayout.astro";
import {
    Footer,
    Header,
    NavigationBar,
    NavigationRail,
    ProductBlogsBodyLayout,
} from "@modules/blogs-module";
import {
    BaseGlobalStyle,
    BaseMaterialTheme,
    ImportMaterialSymbols,
    ImportRobotoStyle,
} from "@modules/shared-module";
import ProductNavigationDrawerLayout from "src/layouts/product-navigation-drawer-layout.astro";

const blogs = await getCollection("blog");
const tags = Array.from(
    new Set(
        blogs
            .map((blog) => blog.data.tags ?? [])
            .reduce((pre, cur) => [...pre, ...cur], []),
    ),
);
---

<ProductRootHtmlLayout>
    <BaseHead slot="head" />

    <ImportRobotoStyle slot="head-after" />
    <BaseMaterialTheme slot="head-after" />
    <BaseGlobalStyle slot="head-after" />
    <ImportMaterialSymbols slot="head-after" />

    <ViewTransitions slot="head-after" />

    <ProductBlogsBodyLayout>
        <NavigationBar slot="bottom-app-bar" />
        <NavigationRail slot="navigation-rail" />

        <div class="sticky-header">
            <Header />
        </div>

        <div class="page-content">
            <div class="filter-container">
                <ProductNavigationDrawerLayout>
                    <md-text-button slot="toggle" id="open-filter-button">
                        Filter
                        <md-icon slot="icon">tune</md-icon>
                    </md-text-button>
                    <h1 slot="headline">Filter</h1>

                    <div class="filter-panel">
                        <md-chip-set
                            class="tag-filter chip-set"
                            id="filter-chip-set"
                        >
                            {
                                tags.map((tag) => (
                                    <md-filter-chip
                                        class="filter-chip"
                                        label={tag}
                                    />
                                ))
                            }
                        </md-chip-set>
                    </div>
                </ProductNavigationDrawerLayout>
            </div>

            <div class="collection-list">
                <ul class="blog-list">
                    {
                        blogs.map((blog) => (
                            <a
                                href={`/feature/blogs/blog/${blog.slug}`}
                                class="blog-list-item"
                                data-tags={blog.data.tags}
                                data-astro-reload
                            >
                                <section>
                                    <h1 class="headline md-typescale-title-medium">
                                        {blog.data.headline}
                                    </h1>
                                    <p class="description md-typescale-body-medium">
                                        {blog.data.description}
                                    </p>
                                </section>
                                <p class="file-name md-typescale-label-small">
                                    {blog.slug}
                                </p>
                                <md-ripple />
                            </a>
                        ))
                    }
                </ul>
            </div>
            <Footer />
        </div>
    </ProductBlogsBodyLayout>
</ProductRootHtmlLayout>

<script>
    import "@material/web/button/text-button";
    import "@material/web/chips/chip-set";
    import "@material/web/chips/filter-chip";
    import "@material/web/icon/icon";
</script>

<script>
    import type { MdChipSet, MdFilterChip } from "@material/web/all";

    const chipset = document.querySelector(".tag-filter.chip-set") as MdChipSet;
    const chips = Array.from(
        chipset.querySelectorAll("&>.filter-chip"),
    ) as Array<MdFilterChip>;

    const blogs = Array.from(
        document.querySelectorAll(".blog-list>.blog-list-item"),
    ) as Array<HTMLElement>;

    const setBlogVisible = (blog: HTMLElement, visible: boolean) => {
        if (visible) {
            blog.removeAttribute("invisible");
        } else {
            blog.setAttribute("invisible", "");
        }
    };

    chipset.addEventListener("click", (e) => {
        const isChipClick = chips.includes(e.target as unknown as any);

        if (!isChipClick) {
            return;
        }

        const activatedChips = chips
            .filter((chip) => chip.selected)
            .map((chip) => chip.label);

        if (activatedChips.length === 0) {
            blogs.forEach((blog) => {
                setBlogVisible(blog, true);
            });
            return;
        }

        for (const index in blogs) {
            const blog = blogs[index];

            const attr = blog.getAttribute("data-tags");
            if (attr === null) {
                continue;
            }

            const attrArray = attr.split(",");
            let isTarget = false;
            for (const attrArrayItem of attrArray) {
                if (activatedChips.includes(attrArrayItem)) {
                    isTarget = true;
                    break;
                }
            }

            setBlogVisible(blog, isTarget);
        }
    });
</script>

<style>
    .sticky-header {
        position: sticky;
        top: 0;
        z-index: 1;
        display: none;

        @media (max-width: 600px) {
            display: block;
        }
    }
    .page-content {
        --navigation-rail-width-computed: 84px;

        padding: 24px;
        @media (min-width: 840px) {
            padding-left: 60px;
            padding-right: 60px;
        }
        @media (min-width: 1600px) {
            max-width: calc(1600px - var(--navigation-rail-width-computed));
        }
        @media (min-width: 1600px) {
            margin: auto;
        }

        & > :not([hidden]) ~ :not([hidden]) {
            --space-y-reverse: 0;
            margin-top: calc(32px * calc(1 - var(--space-y-reverse)));
            margin-bottom: calc(32px * var(--space-y-reverse));
        }
    }
    .collection-list {
        & > h1.collection-series-name:first-child {
            margin-top: 0;
        }
        & > h1.collection-series-name {
            margin: 16px 0 2px;
            color: var(--md-sys-coloron-surface);
        }
    }
</style>

<style>
    .blog-list {
        display: grid;
        grid-template-columns: 1fr;
        gap: 16px;
        @media (min-width: 600px) and (max-width: 840px) {
            grid-template-columns: 1fr 1fr;
        }
        @media (min-width: 840px) and (max-width: 1200px) {
            grid-template-columns: 1fr 1fr 1fr;
        }
        @media (min-width: 1200px) and (max-width: 1600px) {
            grid-template-columns: 1fr 1fr 1fr 1fr;
        }
        @media (min-width: 1600px) {
            grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
        }
    }
</style>

<style>
    .blog-list-item {
        position: relative;
        border-radius: 16px;
        background-color: var(--md-sys-color-surface);
        border: 1px solid var(--md-sys-color-outline-variant);
        z-index: 0;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        overflow: clip;
        width: 100%;
        --md-ripple-hover-color: var(--md-sys-color-primary-container);
        transition-duration: 200ms;

        & > section {
            display: flex;
            flex-direction: column;
            padding-left: 1rem;
            padding-right: 1rem;
            padding-top: 1rem;
            padding-bottom: 1rem;

            & > .headline {
                color: var(--md-sys-color-on-surface);
                overflow: hidden;
                display: -webkit-box;
                -webkit-box-orient: vertical;
                -webkit-line-clamp: 2;
            }
            & > .description {
                color: var(--md-sys-color-on-surface-variant);
                overflow: hidden;
                display: -webkit-box;
                -webkit-box-orient: vertical;
                -webkit-line-clamp: 3;
            }
        }
        & > .file-name {
            padding-left: 1rem;
            padding-right: 1rem;
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
            overflow: hidden;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 2;
            color: var(--md-sys-color-on-surface-variant);
        }
        & > ul.tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            user-select: none;
            padding-bottom: 1rem;
            padding-left: 1rem;
            padding-right: 1rem;

            & > li.tag {
                background-color: var(--md-sys-color-surface-container);
                color: var(--md-sys-color-on-surface-variant);
                position: relative;
                border-radius: 0.375rem;
                px: 2px;
                padding-top: 0.25rem;
                padding-bottom: 0.25rem;
                padding-left: 0.5rem;
                padding-right: 0.5rem;
                pointer-events: none;
            }
        }

        &[invisible] {
            display: none;
        }
    }
    .blog-list-item:hover {
        border-radius: 28px;
    }
    .blog-list-item:active,
    .blog-list-item:hover:active,
    .blog-list-item:focus,
    .blog-list-item:focus-within {
    }
</style>

<!-- Tags Chip Set -->
<style>
    .tag-filter.chip-set {
    }
</style>

<style>
    .filter-panel {
        &[data-open="false"] {
            display: none;
        }
        &[data-open="true"] {
            display: block;
        }
    }
</style>
